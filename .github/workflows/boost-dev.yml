name: SAST
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'INFO'
        type: choice
        options:
        - INFO
        - DEBUG
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize

jobs:
  boost_security_sast:
    name: Boost Security / Native Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install pre-scan dependencies
        run: |
          download_verify_and_unpack() {
            (curl -s -L "$1" | tee /tmp/toxic | shasum -s -a256 -c <(echo "$3  -") && tar -C  $(dirname "$2") -xzf /tmp/toxic "$4" && if [[ ! -z "$4" ]]; then mv "$(dirname $2)/$4" "$2"; else true; fi && chmod +x "$2") || (rm -f /tmp/toxic && false)
          }
          download_verify_and_unpack https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz /usr/local/bin/helm 6cd6cad4b97e10c33c978ff3ac97bb42b68f79766f1d2284cfd62ec04cd177f4 linux-amd64/helm
      - name: Prepare pre-scan script
        run: |
          cat << EOF > /usr/local/bin/render-k8s.sh
          #!/bin/bash
          helm template canaries/helm/charts/hello-world --output-dir ./generated
          EOF
          chmod +x /usr/local/bin/render-k8s.sh
      - name: Native Scanner
        uses: boostsecurityio/boostsec-scanner-github@v3
        env:
          BOOST_LOG_LEVEL: ${{ github.event.inputs.logLevel }}
        with:
          action: scan
          additional_args: --pre-scan-command "/usr/local/bin/render-k8s.sh"
          api_endpoint: https://api.dev.boostsec.io
          api_token: ${{ secrets.BOOST_API_KEY_DEV }}
  brakeman:
    name: Brakeman Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Brakeman
        uses: boostsecurityio/boostsec-scanner-github@v3
        env:
          BOOST_LOG_LEVEL: ${{ github.event.inputs.logLevel }}
        with:
          step_name: brakeman
          action: exec
          additional_args: --require-full-repo
          exec_command: >
            docker run -v %CWD%:/code
              presidentbeef/brakeman
              --format sarif --force
          api_endpoint: https://api.dev.boostsec.io
          api_token: ${{ secrets.BOOST_API_KEY_DEV }}
  semgrep-community-rules:
    name: Semgrep - Community Rules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Semgrep - Auto Config
        uses: boostsecurityio/boostsec-scanner-github@v3
        env:
          BOOST_LOG_LEVEL: ${{ github.event.inputs.logLevel }}
        with:
          step_name: semgrep-auto-config
          action: exec
          exec_command: >
            docker run -v %CWD%:/src
              returntocorp/semgrep:0.94.0
              scan
              --disable-version-check --sarif
              --config auto
          api_endpoint: https://api.dev.boostsec.io
          api_token: ${{ secrets.BOOST_API_KEY_DEV }}
  semgrep-custom-rules:
    name: Semgrep - Custom Rules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Semgrep - Custom Rules
        uses: boostsecurityio/boostsec-scanner-github@v3
        env:
          BOOST_LOG_LEVEL: ${{ github.event.inputs.logLevel }}
        with:
          step_name: semgrep-custom-rules
          action: exec
          exec_command: >
            docker run -v %CWD%:/src
              returntocorp/semgrep:0.94.0
              scan
              --disable-version-check --sarif
              --config /src/.semgrep/custom-rules.yml
          api_endpoint: https://api.dev.boostsec.io
          api_token: ${{ secrets.BOOST_API_KEY_DEV }}
  snyk:
    name: Snyk CLI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Snyk CLI
        uses: boostsecurityio/boostsec-scanner-github@v3
        env:
          BOOST_LOG_LEVEL: ${{ github.event.inputs.logLevel }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          step_name: snyk
          action: exec
          additional_args: --require-full-repo
          exec_command: >
            docker run -e SNYK_TOKEN -v %CWD%:/project --entrypoint snyk -w /project
            snyk/snyk-cli:docker
            test
            --all-projects --sarif
          api_endpoint: https://api.dev.boostsec.io
          api_token: ${{ secrets.BOOST_API_KEY_DEV }}
  findsecbugs:
    name: FindSecBugs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: adopt
          cache: maven
      - name: Prepare Java scanner script
        env:
          JAVA_APP_DIR: ./canaries/java/some-java-demo
          BOOST_LOG_LEVEL: ${{ github.event.inputs.logLevel }}
        run: |
          cat << EOF > /usr/local/bin/scan.sh
          #!/bin/bash
          set -e
          if [[ "$BOOST_LOG_LEVEL" == "DEBUG" ]]; then
            set -x
          fi
          pushd $JAVA_APP_DIR
            mvn clean compile com.github.spotbugs:spotbugs-maven-plugin:spotbugs -Dspotbugs.failOnError=false -Dspotbugs.sarifOutput=true -Dspotbugs.sarifFullPath=true > /dev/null
            jq '.runs[].invocations[].executionSuccessful=true' target/spotbugsSarif.json
          popd
          EOF
          chmod +x /usr/local/bin/scan.sh
      - name: FindSecBugs
        uses: boostsecurityio/boostsec-scanner-github@v3
        env:
          BOOST_LOG_LEVEL: ${{ github.event.inputs.logLevel }}
        with:
          step_name: findsecbugs
          action: exec
          additional_args: --require-full-repo
          exec_command: /usr/local/bin/scan.sh
          api_endpoint: https://api.dev.boostsec.io
          api_token: ${{ secrets.BOOST_API_KEY_DEV }}
  codeql:
    name: CodeQL for Java
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: adopt
          cache: maven
      - name: Prepare Java scanner script
        env:
          JAVA_APP_DIR: ./canaries/java/some-java-demo
          BOOST_LOG_LEVEL: ${{ github.event.inputs.logLevel }}
        run: |
          echo "-- Ensure directories for mounted volumes exist"
          chmod 777 $PWD/$JAVA_APP_DIR # Needed by CodeQL Docker to compile to ./target
          mkdir -p $HOME/.m2
          chmod 777 $HOME/.m2 # Needed by CodeQL Docker to update Maven caches
          mkdir -p $HOME/codeql-dbs
          chmod 777 $HOME/codeql-dbs # Needed by CodeQL Docker to save its DB
          
          echo "-- Pull CodeQL Docker ahead of time"
          docker pull ghcr.io/nealfennimore/codeql:java
          
          echo "-- Creating scan script"
          cat << EOF > /usr/local/bin/scan.sh
          #!/bin/bash
          set -e
          if [[ "$BOOST_LOG_LEVEL" == "DEBUG" ]]; then
            set -x
          fi
          docker run --rm --name codeql \
            -v $PWD/$JAVA_APP_DIR:/tmp/src \
            -v $HOME/.m2:/home/cli/.m2 \
            -v $HOME/codeql-dbs:/tmp/dbs \
            ghcr.io/nealfennimore/codeql:java \
            codeql database create --language=java --command="mvn clean compile -DskipTests" --overwrite --source-root /tmp/src /tmp/dbs/code-db > /dev/null
          docker run --rm --name codeql \
            -v $HOME/codeql-dbs:/tmp/dbs \
            ghcr.io/nealfennimore/codeql:java \
            codeql database analyze /tmp/dbs/code-db java-code-scanning.qls --sarif-category=java --format=sarif-latest --output=/tmp/dbs/code-db/output.sarif  > /dev/null
          cat $HOME/codeql-dbs/code-db/output.sarif
          EOF
          
          chmod +x /usr/local/bin/scan.sh
      - name: CodeQL for Java
        uses: boostsecurityio/boostsec-scanner-github@v3
        env:
          BOOST_LOG_LEVEL: ${{ github.event.inputs.logLevel }}
        with:
          step_name: codeql-for-java
          action: exec
          additional_args: --require-full-repo
          exec_command: /usr/local/bin/scan.sh
          api_endpoint: https://api.dev.boostsec.io
          api_token: ${{ secrets.BOOST_API_KEY_DEV }}
